import { logger } from '#src/util/logger';
export var FlowDirectionMapper;
(function (FlowDirectionMapper) {
    FlowDirectionMapper["DESTROY"] = "destroy";
    FlowDirectionMapper["CREATE"] = "create";
})(FlowDirectionMapper || (FlowDirectionMapper = {}));
export class AppFlow {
    _flowList;
    constructor(...args) {
        this._flowList = [...args];
    }
    async create() {
        await AppFlow.DeepExecFlowList({ direction: FlowDirectionMapper.CREATE, flowList: this._flowList });
    }
    async destroy() {
        await AppFlow.DeepExecFlowList({ direction: FlowDirectionMapper.DESTROY, flowList: this._topLevelReversedFlowList() });
    }
    _topLevelReversedFlowList() {
        return this._flowList.reverse();
    }
    static async DeepExecFlowList(params) {
        try {
            const { flowList, direction } = params;
            // eslint-disable-next-line no-loops/no-loops
            for (const lifeCycle of flowList) {
                if (Array.isArray(lifeCycle)) {
                    await AppFlow.ExecSyncFlowList(lifeCycle, direction);
                }
                else {
                    await lifeCycle[direction]();
                }
            }
        }
        catch (err) {
            if (err instanceof Error) {
                logger().error(err);
            }
            throw err;
        }
    }
    static async ExecSyncFlowList(lifeCycleList, createOrDestroy) {
        await Promise.all(lifeCycleList.map((lifeCycle) => lifeCycle[createOrDestroy]()));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWZsb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvYXBwLWZsb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGtCQUFrQixDQUFBO0FBSXpDLE1BQU0sQ0FBTixJQUFZLG1CQUdYO0FBSEQsV0FBWSxtQkFBbUI7SUFDOUIsMENBQW1CLENBQUE7SUFDbkIsd0NBQWlCLENBQUE7QUFDbEIsQ0FBQyxFQUhXLG1CQUFtQixLQUFuQixtQkFBbUIsUUFHOUI7QUFFRCxNQUFNLE9BQWdCLE9BQU87SUFDVCxTQUFTLENBQVU7SUFFdEMsWUFBc0IsR0FBRyxJQUFjO1FBQ3RDLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFBO0lBQzNCLENBQUM7SUFFRCxLQUFLLENBQUMsTUFBTTtRQUNYLE1BQU0sT0FBTyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsU0FBUyxFQUFFLG1CQUFtQixDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUE7SUFDcEcsQ0FBQztJQUVELEtBQUssQ0FBQyxPQUFPO1FBQ1osTUFBTSxPQUFPLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxTQUFTLEVBQUUsbUJBQW1CLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMseUJBQXlCLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDdkgsQ0FBQztJQUVTLHlCQUF5QjtRQUNsQyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDaEMsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsTUFBOEQ7UUFDM0YsSUFBSSxDQUFDO1lBQ0osTUFBTSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsR0FBRyxNQUFNLENBQUE7WUFDdEMsNkNBQTZDO1lBQzdDLEtBQUssTUFBTSxTQUFTLElBQUksUUFBUSxFQUFFLENBQUM7Z0JBQ2xDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDO29CQUM5QixNQUFNLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUE7Z0JBQ3JELENBQUM7cUJBQU0sQ0FBQztvQkFDUCxNQUFNLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFBO2dCQUM3QixDQUFDO1lBQ0YsQ0FBQztRQUNGLENBQUM7UUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1lBQ2QsSUFBSSxHQUFHLFlBQVksS0FBSyxFQUFFLENBQUM7Z0JBQzFCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUNwQixDQUFDO1lBQ0QsTUFBTSxHQUFHLENBQUE7UUFDVixDQUFDO0lBQ0YsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsYUFBMEIsRUFBRSxlQUFvQztRQUM3RixNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQW9CLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUM3RixDQUFDO0NBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0eXBlIExpZmVDeWNsZSB9IGZyb20gJyNzcmMvbGlmZS1jeWNsZSdcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJyNzcmMvdXRpbC9sb2dnZXInXG5cbmV4cG9ydCB0eXBlIEZsb3dMaXN0ID0gKExpZmVDeWNsZSB8IExpZmVDeWNsZVtdKVtdXG5cbmV4cG9ydCBlbnVtIEZsb3dEaXJlY3Rpb25NYXBwZXIge1xuXHRERVNUUk9ZID0gJ2Rlc3Ryb3knLFxuXHRDUkVBVEUgPSAnY3JlYXRlJyxcbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFwcEZsb3cge1xuXHRwcm90ZWN0ZWQgcmVhZG9ubHkgX2Zsb3dMaXN0OiBGbG93TGlzdFxuXG5cdHByb3RlY3RlZCBjb25zdHJ1Y3RvciguLi5hcmdzOiBGbG93TGlzdCkge1xuXHRcdHRoaXMuX2Zsb3dMaXN0ID0gWy4uLmFyZ3NdXG5cdH1cblxuXHRhc3luYyBjcmVhdGUoKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0YXdhaXQgQXBwRmxvdy5EZWVwRXhlY0Zsb3dMaXN0KHsgZGlyZWN0aW9uOiBGbG93RGlyZWN0aW9uTWFwcGVyLkNSRUFURSwgZmxvd0xpc3Q6IHRoaXMuX2Zsb3dMaXN0IH0pXG5cdH1cblxuXHRhc3luYyBkZXN0cm95KCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdGF3YWl0IEFwcEZsb3cuRGVlcEV4ZWNGbG93TGlzdCh7IGRpcmVjdGlvbjogRmxvd0RpcmVjdGlvbk1hcHBlci5ERVNUUk9ZLCBmbG93TGlzdDogdGhpcy5fdG9wTGV2ZWxSZXZlcnNlZEZsb3dMaXN0KCkgfSlcblx0fVxuXG5cdHByb3RlY3RlZCBfdG9wTGV2ZWxSZXZlcnNlZEZsb3dMaXN0KCk6IEZsb3dMaXN0IHtcblx0XHRyZXR1cm4gdGhpcy5fZmxvd0xpc3QucmV2ZXJzZSgpXG5cdH1cblxuXHRzdGF0aWMgYXN5bmMgRGVlcEV4ZWNGbG93TGlzdChwYXJhbXM6IHsgZmxvd0xpc3Q6IEZsb3dMaXN0OyBkaXJlY3Rpb246IEZsb3dEaXJlY3Rpb25NYXBwZXIgfSk6IFByb21pc2U8dm9pZD4ge1xuXHRcdHRyeSB7XG5cdFx0XHRjb25zdCB7IGZsb3dMaXN0LCBkaXJlY3Rpb24gfSA9IHBhcmFtc1xuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvb3BzL25vLWxvb3BzXG5cdFx0XHRmb3IgKGNvbnN0IGxpZmVDeWNsZSBvZiBmbG93TGlzdCkge1xuXHRcdFx0XHRpZiAoQXJyYXkuaXNBcnJheShsaWZlQ3ljbGUpKSB7XG5cdFx0XHRcdFx0YXdhaXQgQXBwRmxvdy5FeGVjU3luY0Zsb3dMaXN0KGxpZmVDeWNsZSwgZGlyZWN0aW9uKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGF3YWl0IGxpZmVDeWNsZVtkaXJlY3Rpb25dKClcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0aWYgKGVyciBpbnN0YW5jZW9mIEVycm9yKSB7XG5cdFx0XHRcdGxvZ2dlcigpLmVycm9yKGVycilcblx0XHRcdH1cblx0XHRcdHRocm93IGVyclxuXHRcdH1cblx0fVxuXG5cdHN0YXRpYyBhc3luYyBFeGVjU3luY0Zsb3dMaXN0KGxpZmVDeWNsZUxpc3Q6IExpZmVDeWNsZVtdLCBjcmVhdGVPckRlc3Ryb3k6IEZsb3dEaXJlY3Rpb25NYXBwZXIpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRhd2FpdCBQcm9taXNlLmFsbChsaWZlQ3ljbGVMaXN0Lm1hcCgobGlmZUN5Y2xlOiBMaWZlQ3ljbGUpID0+IGxpZmVDeWNsZVtjcmVhdGVPckRlc3Ryb3ldKCkpKVxuXHR9XG59XG4iXX0=