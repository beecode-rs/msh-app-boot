import { logger } from '#src/util/logger';
export var AppStarterStatusMapper;
(function (AppStarterStatusMapper) {
    AppStarterStatusMapper["STARTED"] = "started";
    AppStarterStatusMapper["STOPPED"] = "stopped";
})(AppStarterStatusMapper || (AppStarterStatusMapper = {}));
export class AppStarter {
    _flow;
    _status = AppStarterStatusMapper.STOPPED;
    constructor(appFlow) {
        this._flow = appFlow;
    }
    async start() {
        try {
            if (this._status === AppStarterStatusMapper.STARTED) {
                logger().warn('App already started');
                return;
            }
            this._status = AppStarterStatusMapper.STARTED;
            await this._flow.create();
            this._registerOnExit();
        }
        catch (err) {
            await this._onError(err);
        }
    }
    _registerOnExit() {
        ;
        ['SIGTERM', 'SIGINT'].forEach((signal) => {
            process.on(signal, () => {
                this._gracefulStop().catch((err) => {
                    if (err instanceof Error) {
                        logger().error(err.message);
                        return;
                    }
                    logger().error(err);
                });
            });
        });
    }
    async _gracefulStop() {
        await this.stop();
        process.exit(0);
    }
    async _onError(err) {
        logger().error(err.message);
        await this.stop();
        process.exit(1);
    }
    async stop() {
        if (this._status === AppStarterStatusMapper.STOPPED) {
            logger().warn('App already stopped');
            return;
        }
        this._status = AppStarterStatusMapper.STOPPED;
        await this._flow.destroy();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLXN0YXJ0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvYXBwLXN0YXJ0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGtCQUFrQixDQUFBO0FBRXpDLE1BQU0sQ0FBTixJQUFZLHNCQUdYO0FBSEQsV0FBWSxzQkFBc0I7SUFDakMsNkNBQW1CLENBQUE7SUFDbkIsNkNBQW1CLENBQUE7QUFDcEIsQ0FBQyxFQUhXLHNCQUFzQixLQUF0QixzQkFBc0IsUUFHakM7QUFFRCxNQUFNLE9BQU8sVUFBVTtJQUNaLEtBQUssQ0FBUztJQUNkLE9BQU8sR0FBMkIsc0JBQXNCLENBQUMsT0FBTyxDQUFBO0lBRTFFLFlBQVksT0FBZ0I7UUFDM0IsSUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUE7SUFDckIsQ0FBQztJQUVELEtBQUssQ0FBQyxLQUFLO1FBQ1YsSUFBSSxDQUFDO1lBQ0osSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLHNCQUFzQixDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUNyRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQTtnQkFFcEMsT0FBTTtZQUNQLENBQUM7WUFDRCxJQUFJLENBQUMsT0FBTyxHQUFHLHNCQUFzQixDQUFDLE9BQU8sQ0FBQTtZQUM3QyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUE7WUFDekIsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFBO1FBQ3ZCLENBQUM7UUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1lBQ2QsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQVksQ0FBQyxDQUFBO1FBQ2xDLENBQUM7SUFDRixDQUFDO0lBRVMsZUFBZTtRQUN4QixDQUFDO1FBQUEsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBYyxFQUFFLEVBQUU7WUFDakQsT0FBTyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFO2dCQUN2QixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBWSxFQUFFLEVBQUU7b0JBQzNDLElBQUksR0FBRyxZQUFZLEtBQUssRUFBRSxDQUFDO3dCQUMxQixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFBO3dCQUUzQixPQUFNO29CQUNQLENBQUM7b0JBQ0QsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO2dCQUNwQixDQUFDLENBQUMsQ0FBQTtZQUNILENBQUMsQ0FBQyxDQUFBO1FBQ0gsQ0FBQyxDQUFDLENBQUE7SUFDSCxDQUFDO0lBRVMsS0FBSyxDQUFDLGFBQWE7UUFDNUIsTUFBTSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUE7UUFDakIsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNoQixDQUFDO0lBRVMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFVO1FBQ2xDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDM0IsTUFBTSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUE7UUFDakIsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNoQixDQUFDO0lBRUQsS0FBSyxDQUFDLElBQUk7UUFDVCxJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssc0JBQXNCLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDckQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUE7WUFFcEMsT0FBTTtRQUNQLENBQUM7UUFDRCxJQUFJLENBQUMsT0FBTyxHQUFHLHNCQUFzQixDQUFDLE9BQU8sQ0FBQTtRQUM3QyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDM0IsQ0FBQztDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdHlwZSBBcHBGbG93IH0gZnJvbSAnI3NyYy9hcHAtZmxvdydcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJyNzcmMvdXRpbC9sb2dnZXInXG5cbmV4cG9ydCBlbnVtIEFwcFN0YXJ0ZXJTdGF0dXNNYXBwZXIge1xuXHRTVEFSVEVEID0gJ3N0YXJ0ZWQnLFxuXHRTVE9QUEVEID0gJ3N0b3BwZWQnLFxufVxuXG5leHBvcnQgY2xhc3MgQXBwU3RhcnRlciB7XG5cdHByb3RlY3RlZCBfZmxvdzogQXBwRmxvd1xuXHRwcm90ZWN0ZWQgX3N0YXR1czogQXBwU3RhcnRlclN0YXR1c01hcHBlciA9IEFwcFN0YXJ0ZXJTdGF0dXNNYXBwZXIuU1RPUFBFRFxuXG5cdGNvbnN0cnVjdG9yKGFwcEZsb3c6IEFwcEZsb3cpIHtcblx0XHR0aGlzLl9mbG93ID0gYXBwRmxvd1xuXHR9XG5cblx0YXN5bmMgc3RhcnQoKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0dHJ5IHtcblx0XHRcdGlmICh0aGlzLl9zdGF0dXMgPT09IEFwcFN0YXJ0ZXJTdGF0dXNNYXBwZXIuU1RBUlRFRCkge1xuXHRcdFx0XHRsb2dnZXIoKS53YXJuKCdBcHAgYWxyZWFkeSBzdGFydGVkJylcblxuXHRcdFx0XHRyZXR1cm5cblx0XHRcdH1cblx0XHRcdHRoaXMuX3N0YXR1cyA9IEFwcFN0YXJ0ZXJTdGF0dXNNYXBwZXIuU1RBUlRFRFxuXHRcdFx0YXdhaXQgdGhpcy5fZmxvdy5jcmVhdGUoKVxuXHRcdFx0dGhpcy5fcmVnaXN0ZXJPbkV4aXQoKVxuXHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0YXdhaXQgdGhpcy5fb25FcnJvcihlcnIgYXMgRXJyb3IpXG5cdFx0fVxuXHR9XG5cblx0cHJvdGVjdGVkIF9yZWdpc3Rlck9uRXhpdCgpOiB2b2lkIHtcblx0XHQ7WydTSUdURVJNJywgJ1NJR0lOVCddLmZvckVhY2goKHNpZ25hbDogc3RyaW5nKSA9PiB7XG5cdFx0XHRwcm9jZXNzLm9uKHNpZ25hbCwgKCkgPT4ge1xuXHRcdFx0XHR0aGlzLl9ncmFjZWZ1bFN0b3AoKS5jYXRjaCgoZXJyOiB1bmtub3duKSA9PiB7XG5cdFx0XHRcdFx0aWYgKGVyciBpbnN0YW5jZW9mIEVycm9yKSB7XG5cdFx0XHRcdFx0XHRsb2dnZXIoKS5lcnJvcihlcnIubWVzc2FnZSlcblxuXHRcdFx0XHRcdFx0cmV0dXJuXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGxvZ2dlcigpLmVycm9yKGVycilcblx0XHRcdFx0fSlcblx0XHRcdH0pXG5cdFx0fSlcblx0fVxuXG5cdHByb3RlY3RlZCBhc3luYyBfZ3JhY2VmdWxTdG9wKCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdGF3YWl0IHRoaXMuc3RvcCgpXG5cdFx0cHJvY2Vzcy5leGl0KDApXG5cdH1cblxuXHRwcm90ZWN0ZWQgYXN5bmMgX29uRXJyb3IoZXJyOiBFcnJvcik6IFByb21pc2U8dm9pZD4ge1xuXHRcdGxvZ2dlcigpLmVycm9yKGVyci5tZXNzYWdlKVxuXHRcdGF3YWl0IHRoaXMuc3RvcCgpXG5cdFx0cHJvY2Vzcy5leGl0KDEpXG5cdH1cblxuXHRhc3luYyBzdG9wKCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdGlmICh0aGlzLl9zdGF0dXMgPT09IEFwcFN0YXJ0ZXJTdGF0dXNNYXBwZXIuU1RPUFBFRCkge1xuXHRcdFx0bG9nZ2VyKCkud2FybignQXBwIGFscmVhZHkgc3RvcHBlZCcpXG5cblx0XHRcdHJldHVyblxuXHRcdH1cblx0XHR0aGlzLl9zdGF0dXMgPSBBcHBTdGFydGVyU3RhdHVzTWFwcGVyLlNUT1BQRURcblx0XHRhd2FpdCB0aGlzLl9mbG93LmRlc3Ryb3koKVxuXHR9XG59XG4iXX0=